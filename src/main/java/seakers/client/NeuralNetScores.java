/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package seakers.client;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * Structs are the basic complex data structures. They are comprised of fields
 * which each have an integer identifier, a type, a symbolic name, and an
 * optional default value.
 * 
 * Fields can be declared "optional", which ensures they will not be included
 * in the serialized output if they aren't set.  Note that this requires some
 * manual management in some languages.
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2019-11-01")
public class NeuralNetScores implements org.apache.thrift.TBase<NeuralNetScores, NeuralNetScores._Fields>, java.io.Serializable, Cloneable, Comparable<NeuralNetScores> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NeuralNetScores");

  private static final org.apache.thrift.protocol.TField ARCH_FIELD_DESC = new org.apache.thrift.protocol.TField("arch", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField SCIENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("science", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField COST_FIELD_DESC = new org.apache.thrift.protocol.TField("cost", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NeuralNetScoresStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NeuralNetScoresTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> arch; // required
  public double science; // required
  public double cost; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ARCH((short)1, "arch"),
    SCIENCE((short)2, "science"),
    COST((short)3, "cost");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ARCH
          return ARCH;
        case 2: // SCIENCE
          return SCIENCE;
        case 3: // COST
          return COST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SCIENCE_ISSET_ID = 0;
  private static final int __COST_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ARCH, new org.apache.thrift.meta_data.FieldMetaData("arch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "int"))));
    tmpMap.put(_Fields.SCIENCE, new org.apache.thrift.meta_data.FieldMetaData("science", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COST, new org.apache.thrift.meta_data.FieldMetaData("cost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NeuralNetScores.class, metaDataMap);
  }

  public NeuralNetScores() {
  }

  public NeuralNetScores(
    java.util.List<java.lang.Integer> arch,
    double science,
    double cost)
  {
    this();
    this.arch = arch;
    this.science = science;
    setScienceIsSet(true);
    this.cost = cost;
    setCostIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NeuralNetScores(NeuralNetScores other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetArch()) {
      java.util.List<java.lang.Integer> __this__arch = new java.util.ArrayList<java.lang.Integer>(other.arch.size());
      for (java.lang.Integer other_element : other.arch) {
        __this__arch.add(other_element);
      }
      this.arch = __this__arch;
    }
    this.science = other.science;
    this.cost = other.cost;
  }

  public NeuralNetScores deepCopy() {
    return new NeuralNetScores(this);
  }

  @Override
  public void clear() {
    this.arch = null;
    setScienceIsSet(false);
    this.science = 0.0;
    setCostIsSet(false);
    this.cost = 0.0;
  }

  public int getArchSize() {
    return (this.arch == null) ? 0 : this.arch.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getArchIterator() {
    return (this.arch == null) ? null : this.arch.iterator();
  }

  public void addToArch(int elem) {
    if (this.arch == null) {
      this.arch = new java.util.ArrayList<java.lang.Integer>();
    }
    this.arch.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getArch() {
    return this.arch;
  }

  public NeuralNetScores setArch(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> arch) {
    this.arch = arch;
    return this;
  }

  public void unsetArch() {
    this.arch = null;
  }

  /** Returns true if field arch is set (has been assigned a value) and false otherwise */
  public boolean isSetArch() {
    return this.arch != null;
  }

  public void setArchIsSet(boolean value) {
    if (!value) {
      this.arch = null;
    }
  }

  public double getScience() {
    return this.science;
  }

  public NeuralNetScores setScience(double science) {
    this.science = science;
    setScienceIsSet(true);
    return this;
  }

  public void unsetScience() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCIENCE_ISSET_ID);
  }

  /** Returns true if field science is set (has been assigned a value) and false otherwise */
  public boolean isSetScience() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCIENCE_ISSET_ID);
  }

  public void setScienceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCIENCE_ISSET_ID, value);
  }

  public double getCost() {
    return this.cost;
  }

  public NeuralNetScores setCost(double cost) {
    this.cost = cost;
    setCostIsSet(true);
    return this;
  }

  public void unsetCost() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COST_ISSET_ID);
  }

  /** Returns true if field cost is set (has been assigned a value) and false otherwise */
  public boolean isSetCost() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COST_ISSET_ID);
  }

  public void setCostIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COST_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ARCH:
      if (value == null) {
        unsetArch();
      } else {
        setArch((java.util.List<java.lang.Integer>)value);
      }
      break;

    case SCIENCE:
      if (value == null) {
        unsetScience();
      } else {
        setScience((java.lang.Double)value);
      }
      break;

    case COST:
      if (value == null) {
        unsetCost();
      } else {
        setCost((java.lang.Double)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ARCH:
      return getArch();

    case SCIENCE:
      return getScience();

    case COST:
      return getCost();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ARCH:
      return isSetArch();
    case SCIENCE:
      return isSetScience();
    case COST:
      return isSetCost();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof NeuralNetScores)
      return this.equals((NeuralNetScores)that);
    return false;
  }

  public boolean equals(NeuralNetScores that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_arch = true && this.isSetArch();
    boolean that_present_arch = true && that.isSetArch();
    if (this_present_arch || that_present_arch) {
      if (!(this_present_arch && that_present_arch))
        return false;
      if (!this.arch.equals(that.arch))
        return false;
    }

    boolean this_present_science = true;
    boolean that_present_science = true;
    if (this_present_science || that_present_science) {
      if (!(this_present_science && that_present_science))
        return false;
      if (this.science != that.science)
        return false;
    }

    boolean this_present_cost = true;
    boolean that_present_cost = true;
    if (this_present_cost || that_present_cost) {
      if (!(this_present_cost && that_present_cost))
        return false;
      if (this.cost != that.cost)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetArch()) ? 131071 : 524287);
    if (isSetArch())
      hashCode = hashCode * 8191 + arch.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(science);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cost);

    return hashCode;
  }

  @Override
  public int compareTo(NeuralNetScores other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetArch()).compareTo(other.isSetArch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arch, other.arch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetScience()).compareTo(other.isSetScience());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScience()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.science, other.science);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCost()).compareTo(other.isSetCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cost, other.cost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("NeuralNetScores(");
    boolean first = true;

    sb.append("arch:");
    if (this.arch == null) {
      sb.append("null");
    } else {
      sb.append(this.arch);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("science:");
    sb.append(this.science);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cost:");
    sb.append(this.cost);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NeuralNetScoresStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NeuralNetScoresStandardScheme getScheme() {
      return new NeuralNetScoresStandardScheme();
    }
  }

  private static class NeuralNetScoresStandardScheme extends org.apache.thrift.scheme.StandardScheme<NeuralNetScores> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NeuralNetScores struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ARCH
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.arch = new java.util.ArrayList<java.lang.Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.arch.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setArchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCIENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.science = iprot.readDouble();
              struct.setScienceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cost = iprot.readDouble();
              struct.setCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NeuralNetScores struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.arch != null) {
        oprot.writeFieldBegin(ARCH_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.arch.size()));
          for (int _iter3 : struct.arch)
          {
            oprot.writeI32(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SCIENCE_FIELD_DESC);
      oprot.writeDouble(struct.science);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COST_FIELD_DESC);
      oprot.writeDouble(struct.cost);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NeuralNetScoresTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NeuralNetScoresTupleScheme getScheme() {
      return new NeuralNetScoresTupleScheme();
    }
  }

  private static class NeuralNetScoresTupleScheme extends org.apache.thrift.scheme.TupleScheme<NeuralNetScores> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NeuralNetScores struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetArch()) {
        optionals.set(0);
      }
      if (struct.isSetScience()) {
        optionals.set(1);
      }
      if (struct.isSetCost()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetArch()) {
        {
          oprot.writeI32(struct.arch.size());
          for (int _iter4 : struct.arch)
          {
            oprot.writeI32(_iter4);
          }
        }
      }
      if (struct.isSetScience()) {
        oprot.writeDouble(struct.science);
      }
      if (struct.isSetCost()) {
        oprot.writeDouble(struct.cost);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NeuralNetScores struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.arch = new java.util.ArrayList<java.lang.Integer>(_list5.size);
          int _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readI32();
            struct.arch.add(_elem6);
          }
        }
        struct.setArchIsSet(true);
      }
      if (incoming.get(1)) {
        struct.science = iprot.readDouble();
        struct.setScienceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cost = iprot.readDouble();
        struct.setCostIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

